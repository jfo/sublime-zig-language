# [PackageDev] target_format: plist, ext: tmLanguage
name: Zig
scopeName: source.zig
fileTypes: [zig]

patterns:
  - include: '#storage'
  - include: '#structure'
  - include: '#statement'
  - include: '#async-control'
  - include: '#conditional'
  - include: '#repeat'
  - include: '#constant'
  - include: '#keyword'
  - include: '#type'
  - include: '#type-int'
  - include: '#type-c'
  - include: '#boolean'
  - include: '#operator'
  - include: '#dec-float-number'
  - include: '#hex-float-number'
  - include: '#dec-number'
  - include: '#hex-number'
  - include: '#oct-number'
  - include: '#bin-number'
  - include: '#character'
  - include: '#operators'
  - include: '#comment-line'
  - include: '#comment-line-doc'
  - include: '#strings'
  - include: '#multiline-strings'

repository:
  storage:
    name: storage.zig
    match: '\b(const|var|extern|packed|export|pub|noalias|inline|comptime|nakedcc|stdcallcc|volatile|align|linksection)\b'

  structure:
    name: storage.type.zig
    match: '\b(union|struct|enum|error)\b'

  statement:
    match: '\b(break|return|continue|asm|defer|errdefer|unreachable)\b'
    name: keyword.control.zig

  async-control:
    match: '\b(async|await|suspend|resume|cancel)\b'
    name: keyword.control.async.zig

  conditional:
    match: '\b(if|else|switch|and|or|try|catch|orelse)\b'
    name: keyword.control.conditional.zig

  repeat:
    match: '\b(while|for)\b'
    name: keyword.control.zig

  constant:
    match: '\b(null|undefined)\b'
    name: constant.language.zig

  keyword:
    match: '\b(fn|use|test|@addWithOverflow|@alignCast|@alignOf|@ArgType|@atomicLoad|@atomicRmw|@bitCast|@bitOffsetOf|@boolToInt|@breakpoint|@bswap|@byteOffsetOf|@bytesToSlice|@cDefine|@cImport|@cInclude|@clz|@cmpxchgStrong|@cmpxchgWeak|@compileError|@compileLog|@ctz|@cUndef|@divExact|@divFloor|@divTrunc|@embedFile|@enumToInt|@errorName|@errorReturnTrace|@errorToInt|@errSetCast|@export|@fence|@field|@fieldParentPtr|@floatCast|@floatToInt|@frameAddress|@handle|@import|@inlineCall|@intCast|@intToEnum|@intToError|@intToFloat|@intToPtr|@IntType|@memberCount|@memberName|@memberType|@memcpy|@memset|@mod|@mulWithOverflow|@newStackCall|@noInlineCall|@OpaqueType|@panic|@popCount|@ptrCast|@ptrToInt|@rem|@returnAddress|@setAlignStack|@setCold|@setEvalBranchQuota|@setFloatMode|@setGlobalLinkage|@setRuntimeSafety|@shlExact|@shlWithOverflow|@shrExact|@sizeOf|@sliceToBytes|@sqrt|@subWithOverflow|@tagName|@TagType|@This|@truncate|@typeId|@typeInfo|@typeName|@typeOf)\b'
    name: support.function.zig

  type:
    match: '\b(bool|f16|f32|f64|f128|comptime_float|void|noreturn|type|anyerror|promise)\b'
    name: storage.type.zig

  type-int:
    match: '\b([iu][1-9]\d*|i0|u0|isize|usize|comptime_int)\b'
    name: storage.type.zig.integer

  type-c:
    match: '\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\b'
    name: storage.type.zig.c_compat

  boolean:
    match: '\b(true|false)\b'
    name: constant.language.zig

  operator:
    patterns:
      - match: '(==|!=)'
        name: keyword.operator.zig
      - match: '\b(and|or)\b'
        name: keyword.operator.word.zig
      - match: '(\-\%?|\+%?|\*%?|/[^/]|%)=?'
        name: keyword.operator.arithmetic.zig
      - match: '(\<\<%?|>>|!|&|\^|\|)=?'
        name: keyword.operator.bitwise.zig
      - match: '(==|\+\+|\*\*)'
        name: keyword.operator.special.zig

  dec-float-number:
    match: '\b-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?\b'
    name: constant.numeric.float.zig

  dec-number:
    match: '\b-?[0-9]+\b'
    name: constant.numeric.integer.zig

  hex-float-number:
    match: '\b0x[a-fA-F0-9]+(\.[a-fA-F0-9]+)?([pP][+-]?[0-9]+)?\b'
    name: constant.numeric.float.hex.zig

  hex-number:
    match: '\b0x[a-fA-F0-9]+\b'
    name: constant.numeric.hex.zig

  oct-number:
    match: '\b0o[0-7]+\b'
    name: constant.numeric.octal.zig

  bin-number:
    match: '0b[01]+'
    name: constant.numeric.bin.zig

  todo:
    match: "TODO"
    name: comment.line.todo.zig

  comment-line:
    begin: "//[^/]"
    end: "$\n?"
    name: comment.line.zig
    patterns:
    - include: '#todo'

  comment-line-doc:
    begin: "///"
    end: "$\n?"
    name: comment.line.documentation.zig

  strings:
    begin: "(c\"|\"|')"
    end: "\"|'"
    name: string.quoted.double.zig

  multiline-strings:
    begin: 'c?\\\\'
    end: '$\n?'
    contentName: string.quoted.other.zig
