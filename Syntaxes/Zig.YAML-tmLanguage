# [PackageDev] target_format: plist, ext: tmLanguage
%YAML 1.2
---
name: Zig
scopeName: source.zig
fileTypes: [zig]

patterns:
- comment: keywords
  patterns:
  - name: keyword.control.zig
    match: '\b(while|for|break|return|continue|asm|defer|errdefer|unreachable)\b'

  - name: keyword.control.async.zig
    match: '\b(async|await|suspend|resume|cancel)\b'

  - name: keyword.control.conditional.zig
    match: '\b(if|else|switch|try|catch|orelse)\b'

  - name: keyword.control.import.zig
    match: '(?<!\w)(@import|@cImport|@cInclude)\b'

  - name: keyword.declaration.struct.zig
    match: '\b(struct)\b'

  - name: keyword.declaration.union.zig
    match: '\b(union)\b'

  - name: keyword.declaration.enum.zig
    match: '\b(enum)\b'

  - name: keyword.declaration.error.zig
    match: '\b(error)\b'

  - name: keyword.declaration.function.zig
    match: '\b(fn)\b'

  - name: keyword.declaration.test.zig
    match: '\b(test)\b'

  - name: keyword.other.usingnamespace.zig
    match: '\b(usingnamespace)\b'

- comment: types/storage
  patterns:
    - name: storage.type.zig
      match: '\b(bool|void|noreturn|type|anyerror|promise)\b'

    - name: storage.modifier.zig
      match: '\b(const|var|extern|packed|export|pub|noalias|inline|comptime|nakedcc|stdcallcc|volatile|align|linksection|threadlocal|allowzero)\b'

    - name: storage.type.integer.zig
      match: '\b(?<!\.)([iu][0-9]\d*|[iu]size|comptime_int)\b'

    - name: storage.type.float.zig
      match: '\b(f16|f32|f64|f128|comptime_float)\b'

    - name: storage.type.c_compat.zig
      match: '\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\b'

    - name: storage.type.struct.zig
      match: '\b(struct)\b'

    - name: storage.type.union.zig
      match: '\b(union)\b'

    - name: storage.type.enum.zig
      match: '\b(enum)\b'

    - name: storage.type.error.zig
      match: '\b(error)\b'

    - name: storage.type.function.zig
      match: '\b(fn)\b'

    - name: storage.type.test.zig
      match: '\b(test)\b'

- comment: operators
  patterns:
    - name: keyword.operator.zig
      match: '\b(!)\b'

    - name: keyword.operator.logical.zig
      match: '(==|(?:!|>|<|)=?)'

    - name: keyword.operator.word.zig
      match: '\b(and|or)\b'

    - name: keyword.operator.assignment.zig
      match: '((?:(?:\+|-|\*)\%?|\/|%|<<|>>|&|\|(?=[^\|])|\^)=)'

    - name: keyword.operator.arithmetic.zig
      match: '((?:\+|-|\*)\%?|\/|%|)'

    - name: keyword.operator.bitwise.zig
      match: '(<<|>>|&(?=\W)|\|(?=[^\|])|\^|~)'

    - name: keyword.operator.other.zig
      match: '(\+\+|\*\*|->|\.\?|\.\*|&(?=\w)|\|\|)'

- comment: constants
  patterns:
    - name: constant.language.zig
      match: '\b(null|undefined|true|false)\b'

    - name: constant.numeric.integer.zig
      match: '\b-?[0-9]+\b'

    - name: constant.numeric.integer.hexadecimal.zig
      match: '\b0x[a-fA-F0-9]+\b'

    - name: constant.numeric.integer.octal.zig
      match: '\b0o[0-7]+\b'

    - name: constant.numeric.integer.binary.zig
      match: '0b[01]+'

    - name: constant.numeric.float.zig
      match: '\b-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?\b'

    - name: constant.numeric.float.hexadecimal.zig
      match: '\b0x[a-fA-F0-9]+(\.[a-fA-F0-9]+)?([pP][+-]?[0-9]+)?\b'

- comment: comments
  patterns:
    - name: comment.line.todo.zig
      match: 'TODO'

    - name: comment.line.zig
      begin: '//[^/]'
      end: '$\n?'
      
      patterns:
      - include: '#todo'

    - name: comment.line.documentation.zig
      begin: '///'
      end: '$\n?'

- comment: strings
  patterns:
    - name: string.quoted.single.zig
      begin: (\')
      end: \'
      patterns:
        - include: '#character_escapes'
        - name: invalid.illegal.character.zig
          match: (\\[^\'][^\']*?)
      
    - name: string.quoted.double.zig
      begin: c?\"
      end: \"
      patterns:
        - include: '#character_escapes'
        - name: invalid.illegal.character.zig
          match: (\\[^\'][^\']*?)

    - name: string.quoted.other.zig
      begin: c?\\\\
      end: $\n?

- comment: support
  patterns:
    - name: support.function.zig
      match: '(?<!\w)(@[^\"\d][a-zA-Z_]\w*)\b'

- comment: other
  patterns:
    - comment: function declaration
    - match: '((?:pub)?\s+(?:\w+)?)?(fn)\s+(\w+|@\".+\")\((.*)\)\s*(\w+)'
      captures:
        '1':
          name: storage.modifier.zig
        '2':
          name: keyword.declaration.function.zig
        '3':
          name: entity.name.function.zig
        '4':
          name: variable.parameter.zig
        '5':
          name: storage.type.zig

    - comment: struct declaration
    - match: '(\w+)\s*=\s*(packed|extern)?\s*(struct)\b'
      captures:
        '1':
          name: entity.name.type.zig
        '2':
          name: storage.modifier.zig
        '3':
          name: storage.type.struct.zig

    - comment: error declaration
    - match: '(\w+)\s*=\s*(error)\b'
      captures:
        '1':
          name: entity.name.type.zig
        '2':
          name: storage.type.error.zig

    - comment: enum declaration
    - match: '(\w+)\s*=\s*(extern)?\s*(enum\b)(?:\(((?<!\.)([iu][0-9]\d*|[iu]size))\))?'
      captures:
        '1':
          name: entity.name.type.zig
        '2':
          name: storage.modifier.zig
        '3':
          name: storage.type.enum.zig
        '4':
          name: storage.type.integer.zig

    - comment: union declaration
    - match: '(\w+)\s*=\s*(packed|extern)?\s*(union\b)(?:\((\w+)\))?'
      captures:
        '1':
          name: entity.name.type.zig
        '2':
          name: storage.modifier.zig
        '3':
          name: storage.type.union.zig
        '4':
          name: storage.type.enum.zig

repository:
  character_escapes:
    patterns:
      - name: constant.character.escape.newline.zig
        match: \\n
      - name: constant.character.escape.carrigereturn.zig
        match: \\r
      - name: constant.character.escape.tabulator.zig
        match: \\t
      - name: constant.character.escape.backslash.zig
        match: \\\\
      - name: constant.character.escape.single-quote.zig
        match: \\'
      - name: constant.character.escape.double-quote.zig
        match: \\\"
      - name: constant.character.escape.hexidecimal.zig
        match: \\x[a-fA-F0-9]{2}
      - name: constant.character.escape.hexidecimal.zig
        match: \\u\{[a-fA-F0-9]{1,6}\}
