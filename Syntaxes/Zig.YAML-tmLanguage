# [PackageDev] target_format: plist, ext: tmLanguage
%YAML 1.2
---
name: Zig
scopeName: source.zig
fileTypes: [zig]

patterns:
  - include: '#main'

repository:
  field_decl:
    match: '([a-zA-Z_]\w*|@\".+\")\s*(:)\s*([a-zA-Z_]\w*|@\".+\")(,)?'
    captures:
      '1':
        name: variable.other.member.zig
      '2':
        name: punctuation.terminator.zig
      '3':
        name: storage.type.zig
      '4':
        name: punctuation.separator.zig

  param_list:
    name: meta.function.parameters
    match: '([a-zA-Z_]\w*|@\".+\")\s*(:)\s*([a-zA-Z_]\w*|@\".+\")(,)?'
    captures:
      '1':
        name: variable.parameter
      '2':
        name: punctuation.terminator.zig
      '3':
        name: storage.type.zig
      '4':
        name: punctuation.separator.zig

  character_escapes:
    patterns:
      - name: constant.character.escape.newline.zig
        match: \\n
      - name: constant.character.escape.carrigereturn.zig
        match: \\r
      - name: constant.character.escape.tabulator.zig
        match: \\t
      - name: constant.character.escape.backslash.zig
        match: \\\\
      - name: constant.character.escape.single-quote.zig
        match: \\'
      - name: constant.character.escape.double-quote.zig
        match: \\\"
      - name: constant.character.escape.hexidecimal.zig
        match: \\x[a-fA-F0-9]{2}
      - name: constant.character.escape.hexidecimal.zig
        match: \\u\{[a-fA-F0-9]{1,6}\}

  storage_modifier:
    name: storage.modifier.zig
    match: '\b(const|var|extern|packed|export|pub|noalias|inline|comptime|nakedcc|stdcallcc|volatile|align|linksection|threadlocal|allowzero)\b'

  container:
    patterns:
      - match: '\b(packed|extern)?\b\s*(union\b)(?:(\()([a-zA-Z_]\w*|@\".+\")(\)))'
        captures:
          '1':
            name: storage.modifier.zig
          '2':
            name: storage.type.union.zig
          '3':
            name: punctuation.section.parens.begin.zig
          '4':
            name: storage.type.zig
          '5':
            name: punctuation.section.parens.end.zig

      - name: storage.type.struct.zig
        match: '\b(packed|extern)?\b\s*(struct)\b'
        captures:
          '1':
            name: storage.modifier.zig
          '2':
            name: storage.type.struct.zig

      - name: storage.type.enum.zig
        match: '\b(extern)?\b\s*(enum\b)(?:(\()([a-zA-Z_]\w*|@\".+\")(\)))?'
        captures:
          '1':
            name: storage.modifier.zig
          '2':
            name: storage.type.enum.zig
          '3':
            name: punctuation.section.parens.begin.zig
          '4':
            name: storage.type.zig
          '5':
            name: punctuation.section.parens.end.zig

      - name: storage.type.error.zig
        match: '\b(error)\b'

  constants:
    patterns:
      - name: constant.language.zig
        match: '\b(null|undefined|true|false)\b'

      - name: constant.numeric.integer.zig
        match: '\b(?<!\.)(-?[0-9]+)(?!\.)\b'

      - name: constant.numeric.integer.hexadecimal.zig
        match: '\b(?<!\.)(0x[a-fA-F0-9]+)(?!\.)\b'

      - name: constant.numeric.integer.octal.zig
        match: '\b(?<!\.)(0o[0-7]+)(?!\.)\b'

      - name: constant.numeric.integer.binary.zig
        match: '\b(?<!\.)(0b[01]+)(?!\.)\b'

      - name: constant.numeric.float.zig
        match: '(?<!\.)(-?\b[0-9]+(?:\.[0-9]+)?(?:[eE][+-]?[0-9]+)?)(?!\.)\b'

      - name: constant.numeric.float.hexadecimal.zig
        match: '(?<!\.)(-?\b0x[a-fA-F0-9]+(?:\.[a-fA-F0-9]+)?[pP]?(?:[+-]?[0-9]+)?)(?!\.)\b'

  comments:
    patterns:
      - name: comment.line.todo.zig
        match: 'TODO'

      - name: comment.line.zig
        begin: '//[^/]'
        end: '$\n?'
        
        patterns:
        - include: '#todo'

      - name: comment.line.documentation.zig
        begin: '///'
        end: '$\n?'

  strings:
    patterns:
      - name: string.quoted.single.zig
        begin: \'
        end: \'
        patterns:
          - include: '#character_escapes'
          - name: invalid.illegal.character.zig
            match: \\[^\'][^\']*?
        
      - name: string.quoted.double.zig
        begin: c?\"
        end: \"
        patterns:
          - include: '#character_escapes'
          - name: invalid.illegal.character.zig
            match: \\[^\'][^\']*?

      - name: string.quoted.other.zig
        begin: c?\\\\
        end: $\n?

  keywords:
    patterns:
    - name: keyword.control.zig
      match: '\b(while|for|break|return|continue|asm|defer|errdefer|unreachable)\b'

    - name: keyword.control.async.zig
      match: '\b(async|await|suspend|resume|cancel)\b'

    - name: keyword.control.conditional.zig
      match: '\b(if|else|switch|try|catch|orelse)\b'

    - name: keyword.control.import.zig
      match: '(?<!\w)(@import|@cImport|@cInclude)\b'

    - name: keyword.other.usingnamespace.zig
      match: '\busingnamespace\b'

  operators:
    patterns:
      - name: keyword.operator.zig
        match: '\b!\b'

      - name: keyword.operator.logical.zig
        match: '(==|(?:!|>|<|)=?)'

      - name: keyword.operator.word.zig
        match: '\b(and|or)\b'

      - name: keyword.operator.assignment.zig
        match: '((?:(?:\+|-|\*)\%?|/|%|<<|>>|&|\|(?=[^\|])|\^)=)'

      - name: keyword.operator.arithmetic.zig
        match: '((?:\+|-|\*)\%?|/(?!/)|%|)'

      - name: keyword.operator.bitwise.zig
        match: '(<<|>>|&(?=\W)|\|(?=[^\|])|\^|~)'

      - name: keyword.operator.other.zig
        match: '(\+\+|\*\*|->|\.\?|\.\*|&(?=\w)|\|\||\.\.|\.\.\.)'
  
  support:
    name: support.function.zig
    match: '(?<!\w)@[^\"\d][a-zA-Z_]\w*\b'

  storage:
    patterns:
      - name: storage.type.zig
        match: '\b(bool|void|noreturn|type|anyerror|promise)\b'

      - name: storage.type.integer.zig
        match: '\b(?<!\.)([iu][0-9]\d*|[iu]size|comptime_int)\b'

      - name: storage.type.float.zig
        match: '\b(f16|f32|f64|f128|comptime_float)\b'

      - name: storage.type.c_compat.zig
        match: '\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\b'

      - name: storage.type.test.zig
        match: '\btest\b'

  punctuation:
    patterns:
      - name: punctuation.separator.zig
        match: ','

      - name: punctuation.terminator.zig
        match: ';'

      - name: punctuation.accessor
        match: '(?<=[a-zA-Z_]|\")(\.)(?=[a-zA-Z_]|@\")'

      - name: meta.group
        begin: '(\()'
        beginCaptures:
          '1':
            name: punctuation.section.parens.begin.zig

        end: '(\))'
        endCaptures:
          '1':
            name: punctuation.section.parens.end.zig

  label:
    name: entity.name.label
    match: '(?:([a-zA-Z_]\w*|@\".+\"):(?=\s*{)|(?<!\w):([a-zA-Z_]\w*|@\".+\"))'

  block:
    name: meta.block
    begin: '([a-zA-Z_]\w*|@\".+\")?\s*(\{)'
    beginCaptures:
      '1':
        name: storage.type.zig
      '2':
        name: punctuation.section.braces.begin.zig

    end: '(\})'
    endCaptures:
      '1':
        name: punctuation.section.braces.end.zig

    patterns:
      - include: '#main'

  main:
    patterns:
      - include: '#storage_modifier'
      - include: '#container'
      - include: '#constants'
      - include: '#comments'
      - include: '#strings'
      - include: '#keywords'
      - include: '#operators'
      - include: '#support'
      - include: '#storage'
      - include: '#field_decl'
      - include: '#punctuation'
      - include: '#label'
      - include: '#block'

      - name: meta.function.zig
        begin: '\b(fn)(\()'
        beginCaptures:
          '1':
            name: storage.type.function.zig
          '2':
            name: punctuation.section.parens.begin.zig

        end: '(\))\s*([a-zA-Z_]\w*|@\".+\")?'
        endCaptures:
          '1':
            name: punctuation.section.parens.end.zig
          '2':
            name: storage.type.zig

        patterns:
          - match: '([a-zA-Z_]\w*|@\".+\")(,)?'
            captures:
              '1':
                name: storage.type.zig
              '2':
                name: punctuation.separator.zig

      - name: meta.function.zig
        begin: '\b(fn)\s+([a-zA-Z_]\w*|@\".+\")(\()'
        beginCaptures:
          '1':
            name: storage.type.function.zig
          '2':
            name: entity.name.function.zig
          '3':
            name: punctuation.section.parens.begin.zig

        end: '(\))\s*([a-zA-Z_]\w*|@\".+\")?'
        endCaptures:
          '1':
            name: punctuation.section.parens.begin.zig
          '2':
            name: storage.type.zig

        patterns:
          - include: '#param_list'

      # - begin: 
